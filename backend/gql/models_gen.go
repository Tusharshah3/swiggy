// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gql

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
	"time"
)

type AuthPayload struct {
	Token string `json:"token"`
	User  *User  `json:"user"`
	Role  string `json:"role"`
}

type Cart struct {
	Items []*CartItem `json:"items"`
	Total float64     `json:"total"`
}

type CartItem struct {
	Product  *Product `json:"product"`
	Quantity int      `json:"quantity"`
}

type Mutation struct {
}

type Order struct {
	ID             string         `json:"id"`
	UserID         string         `json:"user_id"`
	Products       []*ProductItem `json:"products"`
	ProductAdmins  []string       `json:"product_admins"`
	TotalPrice     float64        `json:"total_price"`
	Status         OrderStatus    `json:"status"`
	PlacedAt       time.Time      `json:"placedAt"`
	Items          []*OrderItem   `json:"items"`
	IdempotencyKey *string        `json:"idempotencyKey,omitempty"`
}

type OrderItem struct {
	ProductID       string   `json:"productId"`
	Quantity        int      `json:"quantity"`
	PriceAtPurchase float64  `json:"priceAtPurchase"`
	Product         *Product `json:"product,omitempty"`
}

type Payment struct {
	ID        string    `json:"id"`
	UserID    string    `json:"userId"`
	AdminID   string    `json:"adminId"`
	OrderID   string    `json:"orderID"`
	Amount    float64   `json:"amount"`
	Status    string    `json:"status"`
	Method    string    `json:"method"`
	CreatedAt time.Time `json:"createdAt"`
}

type Product struct {
	ID        string    `json:"id"`
	Name      string    `json:"name"`
	Price     float64   `json:"price"`
	Stock     int       `json:"stock"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
	AdminID   int       `json:"adminId"`
	Image     *string   `json:"image,omitempty"`
	Quantity  *string   `json:"quantity,omitempty"`
}

type ProductItem struct {
	ProductID       string   `json:"productId"`
	Quantity        int      `json:"quantity"`
	PriceAtPurchase float64  `json:"priceAtPurchase"`
	Product         *Product `json:"product,omitempty"`
}

type Query struct {
}

type SignupInput struct {
	Email    string  `json:"email"`
	Password string  `json:"password"`
	Name     string  `json:"name"`
	Role     string  `json:"role"`
	Picture  *string `json:"picture,omitempty"`
}

type User struct {
	ID        string    `json:"id"`
	Email     string    `json:"email"`
	Name      string    `json:"name"`
	Role      string    `json:"role"`
	Picture   *string   `json:"picture,omitempty"`
	CreatedAt time.Time `json:"createdAt"`
}

type OrderStatus string

const (
	OrderStatusPending    OrderStatus = "PENDING"
	OrderStatusProcessing OrderStatus = "PROCESSING"
	OrderStatusSuccess    OrderStatus = "SUCCESS"
	OrderStatusFailed     OrderStatus = "FAILED"
)

var AllOrderStatus = []OrderStatus{
	OrderStatusPending,
	OrderStatusProcessing,
	OrderStatusSuccess,
	OrderStatusFailed,
}

func (e OrderStatus) IsValid() bool {
	switch e {
	case OrderStatusPending, OrderStatusProcessing, OrderStatusSuccess, OrderStatusFailed:
		return true
	}
	return false
}

func (e OrderStatus) String() string {
	return string(e)
}

func (e *OrderStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderStatus", str)
	}
	return nil
}

func (e OrderStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *OrderStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e OrderStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
