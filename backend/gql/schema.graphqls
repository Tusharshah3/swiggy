scalar Time

type User {
  id: ID!
  email: String!
  name: String!
  role: String!
  picture: String
  createdAt: Time!
}
input SignupInput {
  email: String!
  password: String!
  name: String!
  role: String!       # new field
  picture: String     # optional
}
type AuthPayload {
  token: String!
  user: User!
  role:  String!
}

type Query {
  me: User
}

type Mutation {
  signup(input: SignupInput!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
}

type Product {
  id: ID!
  name: String!
  price: Float!
  stock: Int!
  createdAt: Time!
  updatedAt: Time!
  adminId: Int!
  image: String 
  quantity: String
}

extend type Query {
  getProducts(page: Int!, limit: Int! ,search: String): [Product!]!
  getProductsCount(search: String): Int!
}

extend type Mutation {
  createProduct(
    name: String!, 
    price: Float!, 
    stock: Int!, 
    image: String,
    quantity: String): Product!
  updateProduct(id: ID!, name: String, price: Float, stock: Int ,image: String, quantity: String): Product!
  deleteProduct(id: ID!): Boolean!
}

type CartItem {
  product: Product!
  quantity: Int!
}

type Cart {
  items: [CartItem!]!
  total: Float!
}

extend type Query {
  myCart: Cart!
}

extend type Mutation {
  addToCart(productId: ID!, quantity: Int!): Cart!
  updateCart(productId: ID!, quantity: Int!): Cart!
  removeFromCart(productId: ID!): Cart!
}

type OrderItem {
  productId: ID!
  quantity: Int!
  priceAtPurchase: Float!
  product: Product
}

enum OrderStatus {
  PENDING
  PROCESSING
  SUCCESS
  FAILED
}
type ProductItem {
  productId: ID!
  quantity: Int!
  priceAtPurchase: Float!
  product: Product
}

type Order {
  id: ID!
  user_id: ID!
  products: [ProductItem!]!  
  product_admins: [ID!]! 
  total_price: Float!
  status: OrderStatus!
  placedAt: Time!
  items: [OrderItem!]!
  idempotencyKey: String
}

extend type Mutation {
  checkout(idempotencyKey: String): Order!
}

extend type Query {
  getOrderHistory: [Order!]!
}
type Payment {
  id: ID!
  userId: ID!
  adminId: ID!
  orderID: ID!
  amount: Float!
  status: String!
  method: String!
  createdAt: Time!
}

extend type Mutation {
  createPaymentsFromOrder(orderId: ID!, method: String!): [Payment!]!
}
extend type Query {
  payments: [Payment!]!
  payment(id: ID!): Payment
  myOrders: [Order!]!
}

extend type Query {
  getAdminOrders: [Order!]!   # âœ… returns orders that include current admin
}
